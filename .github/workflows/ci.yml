name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: "Test & Validate"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Clean Go modcache before restore
      run: go clean -modcache || true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-
      continue-on-error: true

    - name: Clean and download dependencies
      run: |
        # Clean module cache if there are issues
        go clean -modcache || true

        # Download dependencies with proper error handling
        if ! go mod download; then
          echo "Error: Failed to download Go modules"
          echo "Attempting to clean and retry..."
          go clean -modcache
          go mod download
        fi

        # Verify modules are properly downloaded
        go mod verify

    - name: Run tests
      run: go test -v -coverprofile=coverage.out ./...

    - name: Run tests with race detection
      run: go test -race ./...
      env:
        CGO_ENABLED: 1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: false
      continue-on-error: true

    - name: Test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below 80% threshold"
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Check formatting
      run: |
        UNFORMATTED=$(gofmt -s -l .)
        if [ -n "$UNFORMATTED" ]; then
          echo "The following files are not formatted properly:"
          echo "$UNFORMATTED"
          echo ""
          echo "To fix, run: gofmt -s -w ."
          echo ""
          echo "Showing formatting differences:"
          gofmt -s -d .
          exit 1
        else
          echo "All files are properly formatted"
        fi

    - name: Build
      run: go build ./...

  auto-release:
    name: "Auto-Release on Main"
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine next version
      id: version
      run: |
        # Get latest tag, default to v0.0.0 if none exists
        LATEST=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest version: $LATEST"

        # Extract major, minor, patch
        MAJOR=$(echo $LATEST | cut -d. -f1 | sed 's/v//')
        MINOR=$(echo $LATEST | cut -d. -f2)
        PATCH=$(echo $LATEST | cut -d. -f3)

        # Increment patch version for every commit
        PATCH=$((PATCH + 1))
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Create and push tag
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$VERSION" -m "Auto-release $VERSION"
        git push origin "$VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        generate_release_notes: true
        make_latest: true
        body: |
          ## Release ${{ steps.version.outputs.version }}

          Auto-generated release from commit [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})

          ### Installation
          ```go
          go get github.com/ternarybob/banner@${{ steps.version.outputs.version }}
          ```

          ### Changes
          See [commit details](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) for this release.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: "Manual Release"
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        generate_release_notes: true
        make_latest: true
        body: |
          ## Release ${{ github.ref_name }}

          Manual release from tag push.

          ### Installation
          ```go
          go get github.com/ternarybob/banner@${{ github.ref_name }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}